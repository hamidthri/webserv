import pytest
import requests
import time
import os

BASE_URL = "http://localhost:8080"  # Change this to your server's address

def test_get_request():
    response = requests.get(f"{BASE_URL}/test_get")
    assert response.status_code == 200
    assert response.text == "GET response"

def test_post_request():
    data = {'key': 'value'}
    response = requests.post(f"{BASE_URL}/test_post", json=data)
    assert response.status_code == 200
    assert response.json() == {'received': data}

def test_delete_request():
    response = requests.delete(f"{BASE_URL}/test_delete")
    assert response.status_code == 200
    assert response.text == "DELETE successful"

def test_file_upload():
    files = {'file': ('test.txt', 'This is a test file')}
    response = requests.post(f"{BASE_URL}/upload", files=files)
    assert response.status_code == 200
    assert response.text == "File uploaded successfully"

def test_file_download():
    response = requests.get(f"{BASE_URL}/download/test.txt")
    assert response.status_code == 200
    assert response.text == "This is a test file"

def test_concurrent_requests():
    def make_request(url, data=None, files=None):
        if data:
            return requests.post(url, json=data)
        elif files:
            return requests.post(url, files=files)
        else:
            return requests.get(url)

    urls = [
        f"{BASE_URL}/test_get",
        f"{BASE_URL}/test_post",
        f"{BASE_URL}/test_delete",
        f"{BASE_URL}/upload"
    ]
    
    data = {'key': 'value'}
    files = {'file': ('test.txt', 'This is a test file')}

    # Run all requests concurrently
    responses = []
    for url in urls:
        if url == f"{BASE_URL}/upload":
            responses.append(make_request(url, files=files))
        else:
            responses.append(make_request(url, data=data))

    # Check responses
    assert responses[0].status_code == 200
    assert responses[1].status_code == 200
    assert responses[2].status_code == 200
    assert responses[3].status_code == 200

def test_get_large_file():
    response = requests.get(f"{BASE_URL}/large_file")
    assert response.status_code == 200
    assert len(response.content) > 0  # Ensure the file is not empty

@pytest.mark.parametrize("url, expected_status_code", [
    (f"{BASE_URL}/non_existent", 404),
    (f"{BASE_URL}/invalid_method", 405)
])
def test_error_handling(url, expected_status_code):
    response = requests.get(url)
    assert response.status_code == expected_status_code

if __name__ == "__main__":
    pytest.main()
